AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: An API Gateway HTTP API with a default route and Lambda proxy integration
Metadata:
  AWS::ServerlessRepo::Application:
    Name: http-api-lambda-proxy
    Description: An API Gateway HTTP API with a default route and Lambda proxy integration
    Author: Greg Davis
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['api gateway', 'http api', 'v2', 'proxy', 'lambda', 'function', 'nodejs', 'node.js']
    HomePageUrl: https://github.com/gadavis2/http-api-lambda-proxy
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/gadavis2/http-api-lambda-proxy
# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    CodeUri: ./function
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15
Parameters:
  AppName:
    Description: Name of Application
    Type: String
    Default: http-api-lambda-proxy
Resources:
  # API Gateway HTTP API
  HttpApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      Description: An API Gateway HTTP API with a default route and Lambda proxy integration
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations
  # IAM Role that defines the services the function can access and which actions the function can perform
  FunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AppName}-function-role'
      Description: !Sub 'Function Exectuion Role for ${AppName}-function'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  # Lambda Function - uses Globals to define additional configuration values
  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-function'
      Handler: get-event.handler
      Role: !GetAtt FunctionExecutionRole.Arn
      # Example function environment variables
      Environment:
        Variables:
          Variable1: 1234
          Variable2: ABCD
  # Function permissions grant an AWS service or another account permission to use a function
  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'
Outputs:
  HttpApiEndpoint:
    Description: The default endpoint for the HTTP API.
    Value: !GetAtt HttpApi.ApiEndpoint